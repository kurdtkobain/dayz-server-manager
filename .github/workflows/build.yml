name: Build

on:
  workflow_dispatch:
  push:
    branches:
      - master
      - experimental
      - map-workaround
    tags:
      - '*'

env:
  IMAGE_NAME: ${{ github.repository }}

jobs:
  build-windows:
    runs-on: windows-latest
    steps:
    - uses: actions/checkout@v2
    - name: Use Node.js
      uses: actions/setup-node@v1
      with:
        node-version: '16.x'
    
    - name: download mikeros tools
      uses: arma-actions/mikero-tools@latest

    - name: Install deps
      run: npm ci
    - name: Install ui deps
      run: npm run install:ui
    
    - name: Set version
      if: startsWith(github.ref, 'refs/tags/v')
      run: npm version ${{ github.ref_name }}

    - name: Build
      run: npm run build

    - name: Pack (windows)
      run: npm run pack:windows
    
    - name: Zip Artifacts (windows)
      run: powershell Compress-Archive -Path 'build/*' -DestinationPath 'server-manager.zip'
    
    - name: Archive build artifacts (windows)
      uses: actions/upload-artifact@v4
      with:
        name: server-manager-windows
        path: ./server-manager.zip
  
  build-windows-debug:
    runs-on: windows-latest
    steps:
    - uses: actions/checkout@v2
    - name: Use Node.js
      uses: actions/setup-node@v1
      with:
        node-version: '16.x'
    
    - name: download mikeros tools
      uses: arma-actions/mikero-tools@latest

    - name: Install deps
      run: npm ci
    - name: Install ui deps
      run: npm run install:ui
    
    - name: Set version
      if: startsWith(github.ref, 'refs/tags/v')
      run: npm version ${{ github.ref_name }}

    - name: Set mod debug flags
      run: |
        echo "#define DayZServerManager" > "watcher_mod/DayZServerManager/Scripts/Common/DayZServerManager/ServerManagerDefines.c"
        echo "#define DZSM_DEBUG" >> "watcher_mod/DayZServerManager/Scripts/Common/DayZServerManager/ServerManagerDefines.c"
        echo "#define DZSM_DEBUG_CONTAINER" >> "watcher_mod/DayZServerManager/Scripts/Common/DayZServerManager/ServerManagerDefines.c"

    - name: Set manager debug flags
      run: |
        echo "export const dzsmDebugHttp = true;" > "src/config/constants.ts"
        echo "export const dzsmDebugLogReader = true;" >> "src/config/constants.ts"
        echo "export const dzsmDebugProcessList = true;" >> "src/config/constants.ts"

    - name: Build
      run: npm run build

    - name: Pack (windows)
      run: npm run pack:windows
    
    - name: Zip Artifacts (windows)
      run: powershell Compress-Archive -Path 'build/*' -DestinationPath 'server-manager.zip'
    
    - name: Archive build artifacts (windows)
      uses: actions/upload-artifact@v4
      with:
        name: server-manager-windows-debug
        path: ./server-manager.zip  
  release:
    runs-on: ubuntu-latest

    if: startsWith(github.ref, 'refs/tags/v')

    needs:
    - build-windows
    - build-windows-debug

    steps:
    - name: Create Release
      id: create_release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ github.ref }}
        release_name: Release ${{ github.ref }}
        draft: false
        prerelease: false

    - name: Download artifacts (windows)
      uses: actions/download-artifact@v4
      with:
        name: server-manager-windows

    - name: Rename
      run: |
        mv server-manager.zip server-manager-windows.zip

    - name: Upload Release Asset (Windows)
      id: upload-release-asset-windows
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: ./server-manager-windows.zip
        asset_name: server-manager-windows.zip
        asset_content_type: application/zip
    
    - name: Download artifacts (windows debug)
      uses: actions/download-artifact@v4
      with:
        name: server-manager-windows-debug

    - name: Rename
      run: |
        mv server-manager.zip server-manager-windows-debug.zip

    - name: Upload Release Asset (Windows Debug)
      id: upload-release-asset-windows-debug
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: ./server-manager-windows-debug.zip
        asset_name: server-manager-windows-debug.zip
        asset_content_type: application/zip
